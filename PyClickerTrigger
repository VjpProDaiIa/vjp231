import sys
import time
from time import sleep, strftime
from datetime import datetime
import threading
import subprocess
import webbrowser, os, re, json, random
import msvcrt
from os.path import isfile
import ctypes
from faker import Faker
from requests import session
from colorama import Fore, Style
import requests, random, re
from random import choice, randint, shuffle
import requests, pystyle
from pystyle import Write, Colors
from subprocess import Popen
from keyauth import api
import platform
import hashlib
import json as jsond
import os
from pystyle import Add, Center, Anime, Colors, Colorate, Write, System
import urllib.request
import io
import colorama
import json, time, threading, keyboard,sys
import win32api
from ctypes import WinDLL
import numpy as np
from mss import mss as mss_module
import pystyle
from pystyle import Box, Center, Write, Colors, Colorate, Add
from colorama import Fore, init
os.system('cls')
def acutal():
    try:
        findtrigs = open("TriggerBot(DON'T DELETE).json")
    except FileNotFoundError:
        print("\033[1;39m[\033[0;31mMCC Loader\033[1;39m] \033[1;39m\033[1;34mTriggerBot config \033[1;31mis \033[1;31mmissing\033[1;39m. Now downloading \033[0;31mTriggerBot(DON'T DELETE).json")
        os.system('cls')
        github_raw_url = "https://raw.githubusercontent.com/VjpProDaiIa/vjp231/main/TriggerBot(DON'T%20DELETE).json"

        file_path = "TriggerBot(DON'T DELETE).json"
        response = requests.get(github_raw_url)

        if response.status_code == 200:
            with open(file_path, 'wb') as file:
                file.write(response.content)
            print("\033[1;39m[\033[0;31mMCC Loader\033[1;39m] \033[1;34mTriggerBot Config \033[1;39mdownloaded successfully. Now launching")
            try:
                findtrigs
            except subprocess.CalledProcessError as e:
                print(f"Error: {e}")
            else:
                print("Failed while trying to load \033[1;34mTriggerBot's Config")
        else:
            print("\033[1;39m[\033[0;31mMCC Loader\033[1;39m] \033[1;39mError.")
    else:
        SUCCESS = "\x1b[38;5;255m[\x1b[32m+\x1b[38;5;255m]"
        taikhoan = """Logged in as""" + keyauthapp.user_data.username + "."
        subs = keyauthapp.user_data.subscriptions  # Get all Subscription names, expiry, and timeleft
        for i in range(len(subs)):
            sub = subs[i]["subscription"]  # Subscription from every Sub
            expiry = datetime.utcfromtimestamp(int(subs[i]["expiry"])).strftime('%Y-%m-%d %H:%M:%S')  # Expiry date from every Sub
            timeleft = subs[i]["timeleft"]  # Timeleft from every Sub
        whxyu = """

                                           ______     _                       ____        __ 
                                         /_  __/____(_)___ _____ ____  _____/ __ )____  / /_
                                          / / / ___/ / __ `/ __ `/ _ \/ ___/ __  / __ \/ __/
                                         / / / /  / / /_/ / /_/ /  __/ /  / /_/ / /_/ / /_  
                                        /_/ /_/  /_/\__, /\__, /\___/_/  /_____/\____/\__/  
                                                   /____//____/                                           

                                             This is a free product of MCC's Archive.
                                   Any attempt to exploit MCC Loader is a violation of the TOS.              
         """
        print(taikhoan)
        print(Colorate.Horizontal(Colors.red_to_white, whxyu, 1))
        print(f"{SUCCESS} \033[1;32mF10 \033[1;39mto enable trigger bot")
        print(f"{SUCCESS} \033[1;32mK \033[1;39mmust be Fire primary bind in \033[1;31mValorant")
        print(f"{SUCCESS} Enemies color must be \033[1;35mPurple")
        print(f"{SUCCESS} HotKey: \033[1;32mLAlt")
        print(f"{SUCCESS} Trigger delays: \033[0;31mMax\033[1;39m(\033[0;31m10 \033[1;39mms)")

        def exiting():
            try:
                exec(type((lambda: 0).__code__)(0, 0, 0, 0, 0, 0, b'\x053', (), (), (), '', '', 0, b''))
            except:
                try:
                    sys.exit()
                except:
                    raise SystemExit

        user32, kernel32, shcore = (
            WinDLL("user32", use_last_error=True),
            WinDLL("kernel32", use_last_error=True),
            WinDLL("shcore", use_last_error=True),
        )

        shcore.SetProcessDpiAwareness(2)
        WIDTH, HEIGHT = [user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)]

        ZONE = 5
        GRAB_ZONE = (
            int(WIDTH / 2 - ZONE),
            int(HEIGHT / 2 - ZONE),
            int(WIDTH / 2 + ZONE),
            int(HEIGHT / 2 + ZONE),
        )

        class triggerbot:
            def __init__(self):
                self.sct = mss_module()
                self.triggerbot = False
                self.triggerbot_toggle = True
                self.exit_program = False
                self.toggle_lock = threading.Lock()

                with open("TriggerBot(DON'T DELETE).json") as json_file:
                    data = json.load(json_file)

                try:
                    self.trigger_hotkey = int(data["trigger_hotkey"], 16)
                    self.always_enabled = data["always_enabled"]
                    self.trigger_delay = data["trigger_delay"]
                    self.base_delay = data["base_delay"]
                    self.color_tolerance = data["color_tolerance"]
                    self.R, self.G, self.B = (250, 100, 250)  # purple
                except:
                    exiting()

            def cooldown(self):
                time.sleep(0.1)
                with self.toggle_lock:
                    self.triggerbot_toggle = True
                    kernel32.Beep(440, 75), kernel32.Beep(700, 100) if self.triggerbot else kernel32.Beep(440,
                                                                                                          75), kernel32.Beep(
                        200, 100)

            def searcherino(self):
                img = np.array(self.sct.grab(GRAB_ZONE))

                pmap = np.array(img)
                pixels = pmap.reshape(-1, 4)
                color_mask = (
                        (pixels[:, 0] > self.R - self.color_tolerance) & (
                            pixels[:, 0] < self.R + self.color_tolerance) &
                        (pixels[:, 1] > self.G - self.color_tolerance) & (
                                    pixels[:, 1] < self.G + self.color_tolerance) &
                        (pixels[:, 2] > self.B - self.color_tolerance) & (pixels[:, 2] < self.B + self.color_tolerance)
                )
                matching_pixels = pixels[color_mask]

                if self.triggerbot and len(matching_pixels) > 0:
                    delay_percentage = self.trigger_delay / 100.0

                    actual_delay = self.base_delay + self.base_delay * delay_percentage

                    time.sleep(actual_delay)
                    keyboard.press_and_release("k")

            def toggle(self):
                if keyboard.is_pressed("f10"):
                    with self.toggle_lock:
                        if self.triggerbot_toggle:
                            self.triggerbot = not self.triggerbot
                            print(self.triggerbot)
                            self.triggerbot_toggle = False
                            threading.Thread(target=self.cooldown).start()

                    if keyboard.is_pressed("ctrl+shift+x"):  # Check for the kkkkk keybind
                        self.exit_program = True
                        exiting()

            def hold(self):
                while True:
                    while win32api.GetAsyncKeyState(self.trigger_hotkey) < 0:
                        self.triggerbot = True
                        self.searcherino()
                    else:
                        time.sleep(0.1)
                    if keyboard.is_pressed("ctrl+shift+x"):  # Check for the exit keybind
                        self.exit_program = True
                        exiting()

            def starterino(self):
                while not self.exit_program:  # Keep running until the exit_program flag is True
                    if self.always_enabled == True:
                        self.toggle()
                        self.searcherino() if self.triggerbot else time.sleep(0.1)
                    else:
                        self.hold()

        triggerbot().starterino()
acutal()
# f10c247fdf4b3ecabb8a3af00268d6de3f161a6ec6adab3469e58810d8595b24
# f10c247fdf4b3ecabb8a3af00268d6de3f161a6ec6adab3469e58810d8595b24
# 4ad8a882cc83f1361c3650a7f90837a4bb64454a45960982f993a198284a9cdb
# 59434471c9ebcabdbcafb8a2319404231128d2c94d3b3ee2aedbc549ff73a1be
# cf851ccafb56a34cb075c337eb064297e11cab65d7806ee1ecff8225a12e571a
# 59434471c9ebcabdbcafb8a2319404231128d2c94d3b3ee2aedbc549ff73a1be
# cf851ccafb56a34cb075c337eb064297e11cab65d7806ee1ecff8225a12e571a
